@{
    ViewData["Title"] = "Otobüs Bileti Arama";
}

<div class="container d-flex flex-column align-items-center justify-content-center min-vh-100 bg-light p-0">
    <div class="col-12 col-md-8 col-lg-6">
        <div class="card border-0 shadow-sm rounded-4 mt-5 mb-5">
            <div class="card-body p-5">
                <h1 class="display-5 text-center mb-4 fw-bold">🚌 Otobüs Bileti Ara</h1>
                <form id="searchForm" autocomplete="off">
                    <div class="mb-4">
                        <label for="originInput" class="form-label fw-semibold">Nereden</label>
                        <div class="autocomplete-container">
                            <input type="text" class="form-control form-control-lg rounded-3" id="originInput" placeholder="Kalkış yeri ara ve seçin..." autocomplete="off">
                            <div class="autocomplete-dropdown" id="originDropdown"></div>
                            <input type="hidden" id="originId" name="originId">
                        </div>
                    </div>
                    
                    <div class="switch-icon-container">
                        <span id="switchLocations" title="Kalkış ve varış noktalarını değiştir">
                            <div class="custom-swap-icon">
                                <div class="arrow-up"></div>
                                <div class="arrow-down"></div>
                            </div>
                        </span>
                    </div>
                    
                    <div class="mb-4">
                        <label for="destinationInput" class="form-label fw-semibold">Nereye</label>
                        <div class="autocomplete-container">
                            <input type="text" class="form-control form-control-lg rounded-3" id="destinationInput" placeholder="Varış yeri ara ve seçin..." autocomplete="off">
                            <div class="autocomplete-dropdown" id="destinationDropdown"></div>
                            <input type="hidden" id="destinationId" name="destinationId">
                        </div>
                    </div>
                    <div class="mb-4">
                        <label for="departureDate" class="form-label fw-semibold">Kalkış Tarihi</label>
                        <div class="input-group">
                            <input type="date" class="form-control form-control-lg rounded-3" id="departureDate">
                            <button type="button" class="btn btn-outline-secondary" id="todayBtn">Bugün</button>
                            <button type="button" class="btn btn-outline-secondary" id="tomorrowBtn">Yarın</button>
                        </div>
                    </div>
                    <div class="d-grid mb-3">
                        <button type="submit" class="btn btn-primary btn-lg rounded-3 fw-bold">Ara</button>
                    </div>
                    <div id="errorMsg" class="mt-2"></div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // --- LocalStorage keys ---
        const LS_ORIGIN = 'lastOriginId';
        const LS_DEST = 'lastDestinationId';
        const LS_DATE = 'lastDepartureDate';

        let allOrigins = [];
        let allDestinations = [];
        let lastOriginId = localStorage.getItem(LS_ORIGIN);
        let lastDestinationId = localStorage.getItem(LS_DEST);
        let lastDepartureDate = localStorage.getItem(LS_DATE);
        let selectedOriginIndex = -1;
        let selectedDestinationIndex = -1;

        document.addEventListener('DOMContentLoaded', function() {
            setDefaultDate();
            fetchLocations('', 'origin');
            fetchLocations('', 'destination');
            bindEvents();
            
            // Switch icon click event
            document.getElementById('switchLocations').addEventListener('click', function() {
                swapOriginDestination();
            });
        });

        function setDefaultDate() {
            const dateInput = document.getElementById('departureDate');
            let defaultDate = new Date();
            defaultDate.setDate(defaultDate.getDate() + 1);
            let dateStr = defaultDate.toISOString().split('T')[0];
            if (lastDepartureDate) dateStr = lastDepartureDate;
            dateInput.value = dateStr;
        }

        function fetchLocations(search, type) {
            let url = '/api/BusToursApi/locations';
            if (search) url += `?search=${encodeURIComponent(search)}`;
            
            return fetch(url)
                .then(res => {
                    if (!res.ok) {
                        throw new Error(`HTTP error! status: ${res.status}`);
                    }
                    return res.json();
                })
                .then(locations => {
                    if (type === 'origin') {
                        allOrigins = locations;
                        showAutocompleteDropdown('originDropdown', locations, 'origin');
                    } else {
                        allDestinations = locations;
                        showAutocompleteDropdown('destinationDropdown', locations, 'destination');
                    }
                    return locations;
                })
                .catch(error => {
                    console.error('Error fetching locations:', error);
                    // Show empty dropdown with error message
                    const dropdown = document.getElementById(type === 'origin' ? 'originDropdown' : 'destinationDropdown');
                    dropdown.innerHTML = '<div class="autocomplete-item text-danger">Hata oluştu</div>';
                    dropdown.classList.add('show');
                    return [];
                });
        }

        function showAutocompleteDropdown(dropdownId, locations, type) {
            const dropdown = document.getElementById(dropdownId);
            const input = document.getElementById(type === 'origin' ? 'originInput' : 'destinationInput');
            
            if (!input.value.trim()) {
                dropdown.classList.remove('show');
                return;
            }
            
            dropdown.innerHTML = '';
            
            if (locations.length === 0) {
                dropdown.innerHTML = '<div class="autocomplete-item text-muted">Sonuç bulunamadı</div>';
                dropdown.classList.add('show');
                return;
            }
            
            locations.forEach((location, index) => {
                const item = document.createElement('div');
                item.className = 'autocomplete-item';
                item.innerHTML = `
                    <span class="location-name">${location.name}</span>
                    <span class="location-city">(${location.city})</span>
                    <span class="location-type">${location.type || 'Şehir'}</span>
                `;
                
                item.addEventListener('click', () => {
                    selectLocation(location, type);
                });
                
                item.addEventListener('mouseenter', () => {
                    clearSelection(dropdownId);
                    item.classList.add('selected');
                    if (type === 'origin') {
                        selectedOriginIndex = index;
                    } else {
                        selectedDestinationIndex = index;
                    }
                });
                
                dropdown.appendChild(item);
            });
            
            dropdown.classList.add('show');
        }

        function selectLocation(location, type) {
            const input = document.getElementById(type === 'origin' ? 'originInput' : 'destinationInput');
            const hiddenInput = document.getElementById(type === 'origin' ? 'originId' : 'destinationId');
            const dropdown = document.getElementById(type === 'origin' ? 'originDropdown' : 'destinationDropdown');
            
            input.value = `${location.name} (${location.city})`;
            hiddenInput.value = location.id;
            dropdown.classList.remove('show');
            
            // Save to localStorage
            if (type === 'origin') {
                localStorage.setItem(LS_ORIGIN, location.id);
            } else {
                localStorage.setItem(LS_DEST, location.id);
            }
        }

        function clearSelection(dropdownId) {
            const dropdown = document.getElementById(dropdownId);
            const items = dropdown.querySelectorAll('.autocomplete-item');
            items.forEach(item => item.classList.remove('selected'));
        }

        function bindEvents() {
            // Origin input events
            const originInput = document.getElementById('originInput');
            originInput.addEventListener('input', function() {
                fetchLocations(this.value, 'origin');
            });
            
            originInput.addEventListener('keydown', function(e) {
                handleKeyboardNavigation(e, 'origin');
            });
            
            originInput.addEventListener('focus', function() {
                if (this.value.trim()) {
                    document.getElementById('originDropdown').classList.add('show');
                }
            });
            
            // Destination input events
            const destinationInput = document.getElementById('destinationInput');
            destinationInput.addEventListener('input', function() {
                fetchLocations(this.value, 'destination');
            });
            
            destinationInput.addEventListener('keydown', function(e) {
                handleKeyboardNavigation(e, 'destination');
            });
            
            destinationInput.addEventListener('focus', function() {
                if (this.value.trim()) {
                    document.getElementById('destinationDropdown').classList.add('show');
                }
            });
            
            // Close dropdowns when clicking outside
            document.addEventListener('click', function(e) {
                if (!e.target.closest('.autocomplete-container')) {
                    document.getElementById('originDropdown').classList.remove('show');
                    document.getElementById('destinationDropdown').classList.remove('show');
                }
            });
            
            // Date buttons
            document.getElementById('todayBtn').addEventListener('click', function() {
                setDateToToday();
            });
            document.getElementById('tomorrowBtn').addEventListener('click', function() {
                setDateToTomorrow();
            });
            document.getElementById('searchForm').addEventListener('submit', function(e) {
                e.preventDefault();
                handleSearch();
            });
        }

        function handleKeyboardNavigation(e, type) {
            const dropdown = document.getElementById(type === 'origin' ? 'originDropdown' : 'destinationDropdown');
            const items = dropdown.querySelectorAll('.autocomplete-item');
            const locations = type === 'origin' ? allOrigins : allDestinations;
            let selectedIndex = type === 'origin' ? selectedOriginIndex : selectedDestinationIndex;
            
            switch(e.key) {
                case 'ArrowDown':
                    e.preventDefault();
                    selectedIndex = Math.min(selectedIndex + 1, items.length - 1);
                    updateSelection(items, selectedIndex, type);
                    break;
                case 'ArrowUp':
                    e.preventDefault();
                    selectedIndex = Math.max(selectedIndex - 1, -1);
                    updateSelection(items, selectedIndex, type);
                    break;
                case 'Enter':
                    e.preventDefault();
                    if (selectedIndex >= 0 && selectedIndex < locations.length) {
                        selectLocation(locations[selectedIndex], type);
                    }
                    break;
                case 'Escape':
                    dropdown.classList.remove('show');
                    break;
            }
        }

        function updateSelection(items, selectedIndex, type) {
            items.forEach(item => item.classList.remove('selected'));
            if (selectedIndex >= 0 && selectedIndex < items.length) {
                items[selectedIndex].classList.add('selected');
            }
            
            if (type === 'origin') {
                selectedOriginIndex = selectedIndex;
            } else {
                selectedDestinationIndex = selectedIndex;
            }
        }

        function setDateToToday() {
            const today = new Date();
            document.getElementById('departureDate').value = today.toISOString().split('T')[0];
        }
        function setDateToTomorrow() {
            const tomorrow = new Date();
            tomorrow.setDate(tomorrow.getDate() + 1);
            document.getElementById('departureDate').value = tomorrow.toISOString().split('T')[0];
        }

        function handleSearch() {
            clearError();
            const originId = document.getElementById('originId').value;
            const destId = document.getElementById('destinationId').value;
            const date = document.getElementById('departureDate').value;
            const todayStr = new Date().toISOString().split('T')[0];

            if (!originId || !destId) {
                showError('Lütfen kalkış ve varış noktalarını seçin.');
                return;
            }
            if (originId === destId) {
                showError('Kalkış ve varış noktası aynı olamaz.');
                return;
            }
            if (!date) {
                showError('Lütfen kalkış tarihi seçin.');
                return;
            }
            if (date < todayStr) {
                showError('Kalkış tarihi bugünden önce olamaz.');
                return;
            }
            // Save last query
            localStorage.setItem(LS_ORIGIN, originId);
            localStorage.setItem(LS_DEST, destId);
            localStorage.setItem(LS_DATE, date);
            // Redirect to BusTours controller action
            window.location.href = `/BusTours/BusTours?originId=${originId}&destinationId=${destId}&departureDate=${date}`;
        }

        function showError(msg) {
            document.getElementById('errorMsg').innerHTML = `<div class="alert alert-danger">${msg}</div>`;
        }
        function clearError() {
            document.getElementById('errorMsg').innerHTML = '';
        }

        function swapOriginDestination() {
            // Swap input values
            const originInput = document.getElementById('originInput');
            const destinationInput = document.getElementById('destinationInput');
            const originId = document.getElementById('originId');
            const destinationId = document.getElementById('destinationId');
            
            const tempValue = originInput.value;
            originInput.value = destinationInput.value;
            destinationInput.value = tempValue;
            
            const tempId = originId.value;
            originId.value = destinationId.value;
            destinationId.value = tempId;
        }
    </script>
}
